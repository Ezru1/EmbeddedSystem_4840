--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 21.1 cbx_cycloneii 2021:10:21:11:02:24:SJ cbx_lpm_add_sub 2021:10:21:11:02:24:SJ cbx_lpm_compare 2021:10:21:11:02:24:SJ cbx_lpm_decode 2021:10:21:11:02:24:SJ cbx_mgl 2021:10:21:11:11:47:SJ cbx_nadder 2021:10:21:11:02:24:SJ cbx_stratix 2021:10:21:11:02:24:SJ cbx_stratixii 2021:10:21:11:02:24:SJ  VERSION_END


-- Copyright (C) 2021  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 18 
SUBDESIGN decode_tma
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode3204w[1..0]	: WIRE;
	w_anode3213w[3..0]	: WIRE;
	w_anode3230w[3..0]	: WIRE;
	w_anode3240w[3..0]	: WIRE;
	w_anode3250w[3..0]	: WIRE;
	w_anode3260w[3..0]	: WIRE;
	w_anode3270w[3..0]	: WIRE;
	w_anode3280w[3..0]	: WIRE;
	w_anode3290w[3..0]	: WIRE;
	w_anode3302w[1..0]	: WIRE;
	w_anode3309w[3..0]	: WIRE;
	w_anode3320w[3..0]	: WIRE;
	w_anode3330w[3..0]	: WIRE;
	w_anode3340w[3..0]	: WIRE;
	w_anode3350w[3..0]	: WIRE;
	w_anode3360w[3..0]	: WIRE;
	w_anode3370w[3..0]	: WIRE;
	w_anode3380w[3..0]	: WIRE;
	w_data3202w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode3380w[3..3], w_anode3370w[3..3], w_anode3360w[3..3], w_anode3350w[3..3], w_anode3340w[3..3], w_anode3330w[3..3], w_anode3320w[3..3], w_anode3309w[3..3]), ( w_anode3290w[3..3], w_anode3280w[3..3], w_anode3270w[3..3], w_anode3260w[3..3], w_anode3250w[3..3], w_anode3240w[3..3], w_anode3230w[3..3], w_anode3213w[3..3]));
	w_anode3204w[] = ( (w_anode3204w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode3213w[] = ( (w_anode3213w[2..2] & (! w_data3202w[2..2])), (w_anode3213w[1..1] & (! w_data3202w[1..1])), (w_anode3213w[0..0] & (! w_data3202w[0..0])), w_anode3204w[1..1]);
	w_anode3230w[] = ( (w_anode3230w[2..2] & (! w_data3202w[2..2])), (w_anode3230w[1..1] & (! w_data3202w[1..1])), (w_anode3230w[0..0] & w_data3202w[0..0]), w_anode3204w[1..1]);
	w_anode3240w[] = ( (w_anode3240w[2..2] & (! w_data3202w[2..2])), (w_anode3240w[1..1] & w_data3202w[1..1]), (w_anode3240w[0..0] & (! w_data3202w[0..0])), w_anode3204w[1..1]);
	w_anode3250w[] = ( (w_anode3250w[2..2] & (! w_data3202w[2..2])), (w_anode3250w[1..1] & w_data3202w[1..1]), (w_anode3250w[0..0] & w_data3202w[0..0]), w_anode3204w[1..1]);
	w_anode3260w[] = ( (w_anode3260w[2..2] & w_data3202w[2..2]), (w_anode3260w[1..1] & (! w_data3202w[1..1])), (w_anode3260w[0..0] & (! w_data3202w[0..0])), w_anode3204w[1..1]);
	w_anode3270w[] = ( (w_anode3270w[2..2] & w_data3202w[2..2]), (w_anode3270w[1..1] & (! w_data3202w[1..1])), (w_anode3270w[0..0] & w_data3202w[0..0]), w_anode3204w[1..1]);
	w_anode3280w[] = ( (w_anode3280w[2..2] & w_data3202w[2..2]), (w_anode3280w[1..1] & w_data3202w[1..1]), (w_anode3280w[0..0] & (! w_data3202w[0..0])), w_anode3204w[1..1]);
	w_anode3290w[] = ( (w_anode3290w[2..2] & w_data3202w[2..2]), (w_anode3290w[1..1] & w_data3202w[1..1]), (w_anode3290w[0..0] & w_data3202w[0..0]), w_anode3204w[1..1]);
	w_anode3302w[] = ( (w_anode3302w[0..0] & data_wire[3..3]), enable_wire);
	w_anode3309w[] = ( (w_anode3309w[2..2] & (! w_data3202w[2..2])), (w_anode3309w[1..1] & (! w_data3202w[1..1])), (w_anode3309w[0..0] & (! w_data3202w[0..0])), w_anode3302w[1..1]);
	w_anode3320w[] = ( (w_anode3320w[2..2] & (! w_data3202w[2..2])), (w_anode3320w[1..1] & (! w_data3202w[1..1])), (w_anode3320w[0..0] & w_data3202w[0..0]), w_anode3302w[1..1]);
	w_anode3330w[] = ( (w_anode3330w[2..2] & (! w_data3202w[2..2])), (w_anode3330w[1..1] & w_data3202w[1..1]), (w_anode3330w[0..0] & (! w_data3202w[0..0])), w_anode3302w[1..1]);
	w_anode3340w[] = ( (w_anode3340w[2..2] & (! w_data3202w[2..2])), (w_anode3340w[1..1] & w_data3202w[1..1]), (w_anode3340w[0..0] & w_data3202w[0..0]), w_anode3302w[1..1]);
	w_anode3350w[] = ( (w_anode3350w[2..2] & w_data3202w[2..2]), (w_anode3350w[1..1] & (! w_data3202w[1..1])), (w_anode3350w[0..0] & (! w_data3202w[0..0])), w_anode3302w[1..1]);
	w_anode3360w[] = ( (w_anode3360w[2..2] & w_data3202w[2..2]), (w_anode3360w[1..1] & (! w_data3202w[1..1])), (w_anode3360w[0..0] & w_data3202w[0..0]), w_anode3302w[1..1]);
	w_anode3370w[] = ( (w_anode3370w[2..2] & w_data3202w[2..2]), (w_anode3370w[1..1] & w_data3202w[1..1]), (w_anode3370w[0..0] & (! w_data3202w[0..0])), w_anode3302w[1..1]);
	w_anode3380w[] = ( (w_anode3380w[2..2] & w_data3202w[2..2]), (w_anode3380w[1..1] & w_data3202w[1..1]), (w_anode3380w[0..0] & w_data3202w[0..0]), w_anode3302w[1..1]);
	w_data3202w[2..0] = data_wire[2..0];
END;
--VALID FILE
