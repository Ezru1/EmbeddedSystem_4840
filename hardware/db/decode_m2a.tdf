--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=16 LPM_WIDTH=4 data eq
--VERSION_BEGIN 21.1 cbx_cycloneii 2021:10:21:11:02:24:SJ cbx_lpm_add_sub 2021:10:21:11:02:24:SJ cbx_lpm_compare 2021:10:21:11:02:24:SJ cbx_lpm_decode 2021:10:21:11:02:24:SJ cbx_mgl 2021:10:21:11:11:47:SJ cbx_nadder 2021:10:21:11:02:24:SJ cbx_stratix 2021:10:21:11:02:24:SJ cbx_stratixii 2021:10:21:11:02:24:SJ  VERSION_END


-- Copyright (C) 2021  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 16 
SUBDESIGN decode_m2a
( 
	data[3..0]	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire1	: WIRE;
	enable_wire2	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire1w[7..0]	: WIRE;
	eq_wire2w[7..0]	: WIRE;
	w_anode3395w[3..0]	: WIRE;
	w_anode3412w[3..0]	: WIRE;
	w_anode3422w[3..0]	: WIRE;
	w_anode3432w[3..0]	: WIRE;
	w_anode3442w[3..0]	: WIRE;
	w_anode3452w[3..0]	: WIRE;
	w_anode3462w[3..0]	: WIRE;
	w_anode3472w[3..0]	: WIRE;
	w_anode3482w[3..0]	: WIRE;
	w_anode3493w[3..0]	: WIRE;
	w_anode3503w[3..0]	: WIRE;
	w_anode3513w[3..0]	: WIRE;
	w_anode3523w[3..0]	: WIRE;
	w_anode3533w[3..0]	: WIRE;
	w_anode3543w[3..0]	: WIRE;
	w_anode3553w[3..0]	: WIRE;

BEGIN 
	data_wire[2..0] = data[2..0];
	enable_wire1 = (! data[3..3]);
	enable_wire2 = data[3..3];
	eq[] = eq_node[];
	eq_node[] = ( eq_wire2w[7..0], eq_wire1w[]);
	eq_wire1w[] = ( w_anode3472w[3..3], w_anode3462w[3..3], w_anode3452w[3..3], w_anode3442w[3..3], w_anode3432w[3..3], w_anode3422w[3..3], w_anode3412w[3..3], w_anode3395w[3..3]);
	eq_wire2w[] = ( w_anode3553w[3..3], w_anode3543w[3..3], w_anode3533w[3..3], w_anode3523w[3..3], w_anode3513w[3..3], w_anode3503w[3..3], w_anode3493w[3..3], w_anode3482w[3..3]);
	w_anode3395w[] = ( (w_anode3395w[2..2] & (! data_wire[2..2])), (w_anode3395w[1..1] & (! data_wire[1..1])), (w_anode3395w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode3412w[] = ( (w_anode3412w[2..2] & (! data_wire[2..2])), (w_anode3412w[1..1] & (! data_wire[1..1])), (w_anode3412w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode3422w[] = ( (w_anode3422w[2..2] & (! data_wire[2..2])), (w_anode3422w[1..1] & data_wire[1..1]), (w_anode3422w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode3432w[] = ( (w_anode3432w[2..2] & (! data_wire[2..2])), (w_anode3432w[1..1] & data_wire[1..1]), (w_anode3432w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode3442w[] = ( (w_anode3442w[2..2] & data_wire[2..2]), (w_anode3442w[1..1] & (! data_wire[1..1])), (w_anode3442w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode3452w[] = ( (w_anode3452w[2..2] & data_wire[2..2]), (w_anode3452w[1..1] & (! data_wire[1..1])), (w_anode3452w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode3462w[] = ( (w_anode3462w[2..2] & data_wire[2..2]), (w_anode3462w[1..1] & data_wire[1..1]), (w_anode3462w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode3472w[] = ( (w_anode3472w[2..2] & data_wire[2..2]), (w_anode3472w[1..1] & data_wire[1..1]), (w_anode3472w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode3482w[] = ( (w_anode3482w[2..2] & (! data_wire[2..2])), (w_anode3482w[1..1] & (! data_wire[1..1])), (w_anode3482w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode3493w[] = ( (w_anode3493w[2..2] & (! data_wire[2..2])), (w_anode3493w[1..1] & (! data_wire[1..1])), (w_anode3493w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode3503w[] = ( (w_anode3503w[2..2] & (! data_wire[2..2])), (w_anode3503w[1..1] & data_wire[1..1]), (w_anode3503w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode3513w[] = ( (w_anode3513w[2..2] & (! data_wire[2..2])), (w_anode3513w[1..1] & data_wire[1..1]), (w_anode3513w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode3523w[] = ( (w_anode3523w[2..2] & data_wire[2..2]), (w_anode3523w[1..1] & (! data_wire[1..1])), (w_anode3523w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode3533w[] = ( (w_anode3533w[2..2] & data_wire[2..2]), (w_anode3533w[1..1] & (! data_wire[1..1])), (w_anode3533w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode3543w[] = ( (w_anode3543w[2..2] & data_wire[2..2]), (w_anode3543w[1..1] & data_wire[1..1]), (w_anode3543w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode3553w[] = ( (w_anode3553w[2..2] & data_wire[2..2]), (w_anode3553w[1..1] & data_wire[1..1]), (w_anode3553w[0..0] & data_wire[0..0]), enable_wire2);
END;
--VALID FILE
